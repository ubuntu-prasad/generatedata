const fs = require('fs');
const path = require('path');
const pkg = require('../../package.json');
const helpers = require('./helpers');

require('dotenv').config();


const banner = `/**
 * This file is autogenerated. Do not edit!
 * ----------------------------------------
 **/`;

const envSettings = {
	appType: process.env.GD_APP_TYPE,
	defaultNumRows: parseInt(process.env.GD_DEFAULT_NUM_ROWS),
	maxDemoModeRows: parseInt(process.env.GD_MAX_DEMO_MODE_ROWS, 10),
	maxDataSetHistorySize: parseInt(process.env.GD_MAX_DATASET_HISTORY_SIZE, 10),
	defaultLocale: process.env.GD_DEFAULT_LOCALE,
	defaultExportType: process.env.GD_DEFAULT_EXPORT_TYPE,
	apiEnabled: process.env.GD_REST_API_ENABLED === "true",
	availableLocales: process.env.GD_LOCALES.split(','),
	googleAuthClientId: process.env.GD_GOOGLE_AUTH_CLIENT_ID
};

const envSettingsFile = `${banner}

import { GDLocale } from '~types/general';
import { ExportTypeFolder } from './_plugins';

export type AppType = 'login'| 'open' | 'closed';

export type EnvSettings = {
	version: string;
	appType: AppType;
	defaultNumRows: number;
	maxDemoModeRows: number;
	maxDataSetHistorySize: number;
	defaultLocale: GDLocale;
	defaultExportType: ExportTypeFolder;
	apiEnabled: boolean;
	availableLocales: GDLocale[];
	googleAuthClientId: string;
};
`;

const envFile = {
	version: pkg.version,
	...envSettings
};

const generateEnvFile = (filename, content) => {
	const fullContent = `${envSettingsFile}\nconst envSettings: EnvSettings = ${content};\n\nexport default envSettings;\n`;

	const buildFolder = path.join(__dirname, '..');
	if (!fs.existsSync(buildFolder)) {
		fs.mkdirSync(buildFolder, { recursive: true });
	}
	const file = path.join(__dirname, '..', filename);
	if (fs.existsSync(file)) {
		fs.unlinkSync(file);
	}
	fs.writeFileSync(file, fullContent);
};

const createPluginsListFile = () => {
	let content = banner + '\n\n';

	const dataTypes = helpers.getPlugins('dataTypes', []);
	dataTypes.forEach((folder) => {
		content += `import ${folder} from './src/plugins/dataTypes/${folder}/config';\n`;
	});
	content += `\nexport const dataTypes = {\n\t${dataTypes.join(',\n\t')}\n};\n`;
	content += '\nexport type DataTypeFolder = keyof typeof dataTypes;\n';
	content += '\nexport const blacklistedDataTypeFolders = [\'' + process.env.GD_DATA_TYPE_BLACKLIST.split(',').join('\',\'') + '\'];\n\n';

	const exportTypes = helpers.getPlugins('exportTypes', process.env.GD_EXPORT_TYPE_BLACKLIST.split(','));
	exportTypes.forEach((folder) => {
		content += `import ${folder} from './src/plugins/exportTypes/${folder}/config';\n`;
	});
	content += `\nexport const exportTypes = {\n\t${exportTypes.join(',\n\t')}\n};\n`;
	content += '\nexport type ExportTypeFolder = keyof typeof exportTypes;\n\n';

	// currently there's no metadata we need for countries, so we just keep track of the names
	const countries = helpers.getPlugins('countries', process.env.GD_COUNTRY_BLACKLIST.split(','), false);
	content += `\nexport const countryList = ['${countries.join('\', \'')}'];\n`;
	content += `export const countries = ['${countries.join('\', \'')}'] as const;\n`;

	const file = path.join(__dirname, '..', '_plugins.ts');
	if (fs.existsSync(file)) {
		fs.unlinkSync(file);
	}
	fs.writeFileSync(file, content);
};


// the import file allows anyone extending this application to define their own global imports to be included in the
// webpack bundle. Right now I'm just using this for importing google analytics for the website, but it'll get
// expanded on later for all the extra tabs (About, Donate etc.)
const createImportFile = () => {
	const importLines = [];
	const files = process.env.GD_IMPORT_FILES;

	if (files) {
		files.split(',').forEach((filePathFromRoot) => {
			importLines.push(`import '../${filePathFromRoot}';`);
		});
	}

	const file = path.join(__dirname, '..', '_imports.ts');
	if (fs.existsSync(file)) {
		fs.unlinkSync(file);
	}

	// rollup gets confused with an empty file, so we add a default exports just in case
	if (!importLines.length) {
		importLines.push(`// DO NOT EDIT: This is autogenerated by a node script \nexport default {};`);
	}
	fs.writeFileSync(file, importLines.join('\n'));
};

generateEnvFile('_env.ts', JSON.stringify(envFile, null, '\t'));

createPluginsListFile();
createImportFile();
